from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from bs4 import BeautifulSoup
import time
import schedule
import requests
import logging
import os
import json
from datetime import datetime
import traceback

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("parser.log", encoding='utf-8'),  # –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä encoding='utf-8'
        logging.StreamHandler()
    ]
)
logger = logging.getLogger()

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
BASE_URL = "https://www.rabota.md/ru/jobs-moldova"
KEYWORDS = ["–ø–æ —Å–º–µ–Ω–Ω–æ–º—É –≥—Ä–∞—Ñ–∏–∫—É", "part-time", "√Æn ture", "contabil", "–±—É—Ö–≥–∞–ª—Ç–µ—Ä", "operator"]  # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
MAX_PAGES = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞

# --- Telegram ---
TOKEN = "8174406929:AAFbPL1rePiPe7J4Jxps3MNEtSFJfGVth5c"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Ç–æ–∫–µ–Ω —Ç–≤–æ–µ–≥–æ –±–æ—Ç–∞
CHAT_ID = "6137830790"   # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Ç–≤–æ–π chat_id

def send_to_telegram(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    try:
        url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
        payload = {"chat_id": CHAT_ID, "text": message, "parse_mode": "HTML"}
        response = requests.post(url, data=payload)
        response_data = response.json()

        if response.status_code == 200 and response_data.get('ok'):
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {response_data}")

        return response_data
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {str(e)}")
        return None

def save_found_jobs(job_links):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –≤ —Ñ–∞–π–ª"""
    try:
        with open("found_jobs.json", "w", encoding="utf-8") as f:
            json.dump(job_links, f, ensure_ascii=False)
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(job_links)} ID –≤–∞–∫–∞–Ω—Å–∏–π")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π: {str(e)}")

def load_found_jobs():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists("found_jobs.json"):
            with open("found_jobs.json", "r", encoding="utf-8") as f:
                return json.load(f)
        return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π: {str(e)}")
        return []

def setup_driver():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥—Ä–∞–π–≤–µ—Ä Chrome"""
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Selenium —Å Chrome
        options = Options()
        options.add_argument('--headless')
        options.add_argument('--disable-gpu')
        options.add_argument('--no-sandbox')
        options.add_argument('--disable-dev-shm-usage')
        options.add_argument('--window-size=1920,1080')
        options.add_argument('--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36')

        # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å Service –æ–±—ä–µ–∫—Ç, —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è Selenium 4+
        try:
            # –ï—Å–ª–∏ ChromeDriver –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ PATH
            driver = webdriver.Chrome(options=options)
        except:
            # –ï—Å–ª–∏ ChromeDriver –Ω–µ –≤ PATH, –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø—É—Ç—å
            # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ chromedriver.exe –¥–ª—è Windows –∏–ª–∏ chromedriver –¥–ª—è Linux/Mac
            driver_path = "./chromedriver"  # –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å
            service = Service(executable_path=driver_path)
            driver = webdriver.Chrome(service=service, options=options)

        logger.info("WebDriver —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return driver
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –¥—Ä–∞–π–≤–µ—Ä–∞: {str(e)}")
        logger.error(traceback.format_exc())
        return None

def get_html(url, driver):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ Chrome –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML-–∫–æ–¥"""
    try:
        logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {url}")
        driver.get(url)

        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ø–æ–º–æ—â—å—é —è–≤–Ω–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è
        wait = WebDriverWait(driver, 10)
        wait.until(EC.presence_of_element_located((By.TAG_NAME, "body")))

        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        #driver.save_screenshot(f"page_{int(time.time())}.png")

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page_source = driver.page_source
        logger.info(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –¥–ª–∏–Ω–∞ HTML: {len(page_source)} —Å–∏–º–≤–æ–ª–æ–≤")

        # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏–º HTML
        with open(f"page_{int(time.time())}.html", "w", encoding="utf-8") as f:
            f.write(page_source)

        return page_source
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {url}: {str(e)}")
        logger.error(traceback.format_exc())
        return None

def parse_jobs(html):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –∏—Ö –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
    try:
        if not html:
            logger.error("HTML –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω")
            return []

        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ HTML")
        soup = BeautifulSoup(html, "lxml")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
        vacancy_links = soup.select(".vacancies-feed a.vacancyShowPopup")
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏: {len(vacancy_links)}")

        # –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ
        if not vacancy_links:
            logger.warning("–°–µ–ª–µ–∫—Ç–æ—Ä '.vacancies-feed a.vacancyShowPopup' –Ω–µ –Ω–∞—à–µ–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ")

            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            vacancy_links = soup.select("a.vacancyShowPopup")
            if not vacancy_links:
                vacancy_links = soup.select(".card a[href*='/vacancy/']")
                if not vacancy_links:
                    vacancy_links = soup.select("div.vacancy-block a")
                    if not vacancy_links:
                        vacancy_links = soup.select("div.job-title")

        logger.info(f"–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {len(vacancy_links)}")

        results = []
        for link in vacancy_links:
            title = link.text.strip()
            url = link.get("href", "")
            if not url.startswith("http"):
                url = "https://www.rabota.md" + url

            logger.debug(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–∞—è –≤–∞–∫–∞–Ω—Å–∏—è: {title}, URL: {url}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            if any(word.lower() in title.lower() for word in KEYWORDS):
                logger.info(f"–í–∞–∫–∞–Ω—Å–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∏–ª—å—Ç—Ä—É: {title}")
                results.append(f"üîπ <b>{title}</b>\n<a href='{url}'>–°–º–æ—Ç—Ä–µ—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é</a>")
            else:
                logger.debug(f"–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∏–ª—å—Ç—Ä—É: {title}")

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä—É: {len(results)}")
        return results
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {str(e)}")
        logger.error(traceback.format_exc())
        return []

def scrape_all_pages(driver):
    """–ü–∞—Ä—Å–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü —Å–∞–π—Ç–∞"""
    all_results = []
    for page in range(1, MAX_PAGES + 1):
        url = f"{BASE_URL}?page={page}"
        logger.info(f"–ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {page} –∏–∑ {MAX_PAGES}: {url}")

        html = get_html(url, driver)
        if html:
            results = parse_jobs(html)
            all_results.extend(results)
            logger.info(f"–ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page} –Ω–∞–π–¥–µ–Ω–æ {len(results)} –≤–∞–∫–∞–Ω—Å–∏–π")
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å HTML –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}")

        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        time.sleep(5)

    logger.info(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(all_results)} –≤–∞–∫–∞–Ω—Å–∏–π")
    return all_results

def job():
    logger.info(f"=== –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} ===")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–Ω–µ–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
    found_jobs = load_found_jobs()
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(found_jobs)} —Ä–∞–Ω–µ–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞
    driver = setup_driver()
    if not driver:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥—Ä–∞–π–≤–µ—Ä. –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.")
        return

    # –ü–∞—Ä—Å–∏–º –≤–∞–∫–∞–Ω—Å–∏–∏
    try:
        vacancies = scrape_all_pages(driver)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {str(e)}")
        logger.error(traceback.format_exc())
        vacancies = []
    finally:
        try:
            driver.quit()
            logger.info("–î—Ä–∞–π–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç")
        except:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –¥—Ä–∞–π–≤–µ—Ä")

    if not vacancies:
        logger.warning("–í–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        # –û—Ç–ø—Ä–∞–≤–∏–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Telegram API
        send_to_telegram("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞. –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π
    new_vacancies = []
    new_links = []

    for vacancy in vacancies:
        try:
            link = vacancy.split("'")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫—É
            if link not in found_jobs:
                new_vacancies.append(vacancy)
                new_links.append(link)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞–∫–∞–Ω—Å–∏–∏: {vacancy}, –æ—à–∏–±–∫–∞: {str(e)}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
    if new_links:
        found_jobs.extend(new_links)
        save_found_jobs(found_jobs)

    if new_vacancies:
        message = f"üì¢ –ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ ({len(new_vacancies)}):\n\n" + "\n\n".join(new_vacancies)

        # –†–∞–∑–±–∏–≤–∞–µ–º –±–æ–ª—å—à–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏
        max_length = 4000
        for i in range(0, len(message), max_length):
            chunk = message[i:i + max_length]
            send_to_telegram(chunk)
            time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏

        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(new_vacancies)} –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –≤ Telegram")
    else:
        logger.info("–ù–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

def test_connection():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–∞–π—Ç–æ–º –∏ API Telegram"""
    logger.info("=== –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è ===")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–∞–π—Ç–æ–º
    try:
        response = requests.get(BASE_URL, timeout=10)
        logger.info(f"–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–∞–π—Ç–æ–º: —Å—Ç–∞—Ç—É—Å {response.status_code}")
        if response.status_code == 200:
            logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–∞–π—Ç–æ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–∞–π—Ç—É, –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞: {response.status_code}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–∞–π—Ç—É: {str(e)}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API Telegram
    try:
        result = send_to_telegram("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API")
        if result and result.get('ok'):
            logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Telegram API: {result}")
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Telegram API: {str(e)}")

    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Selenium
    try:
        driver = setup_driver()
        if driver:
            logger.info("–¢–µ—Å—Ç Selenium —É—Å–ø–µ—à–µ–Ω, –¥—Ä–∞–π–≤–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            driver.quit()
        else:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥—Ä–∞–π–≤–µ—Ä Selenium")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Selenium: {str(e)}")
        logger.error(traceback.format_exc())

    logger.info("=== –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è ===")

if __name__ == "__main__":
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        test_connection()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä —Å—Ä–∞–∑—É
        job()

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫
        schedule.every(8).hours.do(job)

        logger.info("‚è≥ –ü–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 8 —á–∞—Å–æ–≤... –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        while True:
            schedule.run_pending()
            time.sleep(60)
    except KeyboardInterrupt:
        logger.info("–ü–∞—Ä—Å–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        logger.critical(traceback.format_exc())
